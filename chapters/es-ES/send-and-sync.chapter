# Send & Sync

---

Existen dos traits especiales en Rust para la semántica de concurrencia.

-   `Send` marca a una estructura como segura para ser *enviada* entre hilos.
-   `Sync` marca a una estructura como segura para ser *compartida* entre hilos.
    -   (`&T` is `Send`)

---

Estos traits es lo que usa Rust para prevenir "data races".

Son *automáticamente derivados* para todos los tipos si son apropiados.

---

## Derivación automática

<pre><code data-source="chapters/shared/code/send-and-sync/1.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

Existen algunos tipos notables que no son `Send` o `Sync`.

Como `Rc`, punteros crudos (raw pointers), y `UnsafeCell`.

---

## Ejemplo: `Rc`

<pre><code data-source="chapters/shared/code/send-and-sync/2.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Ejemplo: `Rc`

<pre><code data-source="chapters/shared/code/send-and-sync/3.output" data-trim="hljs output"></code></pre>

---

## Implementando

Es posible agregar la implementación de `Send` y `Sync` a un tipo.

<pre><code data-source="chapters/shared/code/send-and-sync/4.rs" data-trim="hljs rust"></code></pre>
En estos casos, la tarea de la seguridad en threads se deja al implementador.

---

## Relaciones

Si un tipo implementa `Sync` y `Copy` entonces también puede implementar `Send`.

---

## Relaciones

Un tipo `&T` puede implementar `Send` si el tipo `T` también implementa `Send`.

<pre><code data-source="chapters/shared/code/send-and-sync/5.rs" data-trim="hljs rust"></code></pre>

---

## Relaciones

Un tipo `&mut T` puede implementar `Send` si el tipo `T` también implementa `Send`.

<pre><code data-source="chapters/shared/code/send-and-sync/6.rs" data-trim="hljs rust"></code></pre>

---

## Consecuencias

¿Cuáles son las consecuencias de tener `Send` and `Sync`?

---

## Consecuencias

Cargando esta información al nivel del sistema de tipos permite detectar condiciones de carrera a un nivel de *tiempo de compilación*.

Previniendo esta clase de errores de llegar a sistemas en producción.
