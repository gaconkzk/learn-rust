# Tipos estándar

---

Hay distintos tipos en Rust.

Impulsan el poderoso sistema de tipos para conseguir tareas fundamentales.

---

## Visión general

-   `Option<T>` - Remueve la necesidad de la primitiva `null`.
-   `Result<T,E>` - Remueve la necesidad de excepciones.
-   `Vec<T>` - Arreglos de tamaño variable.
-   `HashMap<K,V>` - Almacenamiento en Llave-valor.

---

## `Option<T>`

<pre><code data-source="chapters/shared/code/standard-types/1.rs" data-trim="hljs rust"></code></pre>
Options son envolturas de tipos, necesitan ser desenvueltos para ser usados.

---

## `Option<T>`

Cualquier función que no siempre devuelve un valor devuelve un `Option<T>`.

<pre><code data-source="chapters/shared/code/standard-types/2.rs" data-trim="hljs rust"></code></pre>

---

## `Option<T>`: Beneficios

El programador *siempre* sabe cuando un `None` puede aparecer, y puede decidir como la situación debe ser manejada.

Esta característica ayuda a remover el *misterio* del proceso de desarrollo y ayuda en la confianza.

---

## `Option<T>`: Desenvolviendo

`unwrap()` creara un "panic" en la aplicación si el valor es `None`.

Esto sólo es recomendado en pruebas y prototipos.

<pre><code data-source="chapters/shared/code/standard-types/3.rs" data-trim="hljs rust"></code></pre>

---

## `Option<T>`: Seguridad

`match` es una de las varias formas de trabajar seguramente con `Option`.

<pre><code data-source="chapters/shared/code/standard-types/4.rs" data-trim="hljs rust"></code></pre>
No importa que valor tenga `maybe_a_value`, el programa nunca fallará.

---

## `Option<T>`: Preguntas

¿Este tipo realmente remueve la necesidad de una primitiva `null`?

¿Cuáles son los beneficios?

---

## `Result<T,E>`

<pre><code data-source="chapters/shared/code/standard-types/5.rs" data-trim="hljs rust"></code></pre>
`Result` son envolturas de tipo que pueden contener un valor exitoso o un valor de error.

---

## `Result<T,E>`: Usando

Pueden ser manejados con `unwrap()` al igual que los tipos `Option`, y pueden ser manejados de la misma forma.

<pre><code data-source="chapters/shared/code/standard-types/6.rs" data-trim="hljs rust"></code></pre>
El manejo de escenarios con errores complejos será abordado en un capítulo posterior.

---

## `Result<T,E>`: Preguntas

¿Este tipo realmente remueve la necesidad de excepciones?

¿Cuáles son los beneficios?

---

## `Vec<T>`

Arreglos de tamaño variable, mutables y propios localizados en el heap.

<pre><code data-source="chapters/shared/code/standard-types/7.rs" data-trim="hljs rust"></code></pre>

---

## `Vec<T>`: Creación

Crear con `Vec::new()` o con la macro `vec![]`.

<pre><code data-source="chapters/shared/code/standard-types/8.rs" data-trim="hljs rust"></code></pre>

---

## `Vec<T>`: Como un slice

`Vec<T>` implementa `Deref<Target=[T]`, así que puede ser fácilmente usado como slice.

<pre><code data-source="chapters/shared/code/standard-types/9.rs" data-trim="hljs rust"></code></pre>

---

## `HashMap<K,V>`

HashMaps son para almacenamiento de llave-valor. Las llaves deben implementar `Hash`.

<pre><code data-source="chapters/shared/code/standard-types/10.rs" data-trim="hljs rust"></code></pre>

---

## `HashMap<K,V>`: `entry()`

Manipular la correspondencia de una llave en su lugar.

<pre><code data-source="chapters/shared/code/standard-types/11.rs" data-trim="hljs rust"></code></pre>

