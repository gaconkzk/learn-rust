# Cadenas
[Tabla de Contenido](toc/spanish.html)

---

Hay distintos tipos de cadenas en Rust.

Los más comunes son `String` y `&str`.

---

## `String`

-   *Posee* el dato que almacena, y puede mutar libremente.
-   Existe como un puntero a algunos bytes, a longitud y capacidad.
-   Existe en el *heap*.
-   No implementa `Copy`, pero implementa `Clone`.

---

## `&str`

-   Es una referencia inmutable a un slice de cadena.
-   Sólo se ve como un valor prestado..
-   Puede estar en cualquier lado, en el heap, en el stack o en la memoria del programa.

---

## Creación

<pre><code data-source="chapters/shared/code/strings/1.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## ¿Cuándo usar qué?

-   `String` es la forma *fácil* de usar cuando se empieza. Refinar después.
-   `String` posee sus datos, así que funciona bien como un campo en una estructura o enum.

-   `&'static str` funciona bien para valores constantes.
-   `&str` es normalmente usado en argumentos de funciones.

---

## `Deref` Coerción

Sólo porque múltiples tipos existan no significa que puedan trabajar en armonía.

<pre><code data-source="chapters/shared/code/strings/2.rs" data-trim="hljs rust" class="lang-rust"></code></pre>
Esto es porque `String`s implementa `Deref<Target=str>`.

---

## Tipos String exóticos

-   `OsStr` y `OsString` pueden verse cuando se trabaja con sistemas de archivos o llamadas al sistema.

-   `CStr` y `CString` pueden verse al trabajar con FFI.

La diferencia entre `*Str` y `*String` es generalmente la misma que los tipos normales.

---

## `OsString` & `OsStr`

Estos tipos representan cadenas *nativas* dependientes de plataformas. Esto es necesario porque cadenas de Unix y Windows tienen diferentes características.

---

## Detrás de `OsString`

-   Las cadenas en Unix son a menudo secuencias arbitrarias distintas de cero, usualmente interpretadas como UTF-8.
-   Las cadenas en Windows son a menudo secuencias arbitrarias distintas de cero, usualmente interpretadas como UTF-16.
-   Las cadenas en Rust son siempre UTF-8 válido, y pueden contener ceros.

`OsString` y `OsStr` facilitan la conversión de y para `String` and `str`.

---

## `CString` & `CStr`

Estos tipos representan cadenas válidas compatibles con C.

Son predominantemente utilizadas al hacer FFI con código externo.

Es altamente recomendado leer *toda* la documentación en estos tipos antes de usarlos.

---

## Tareas comunes con cadenas

Separación:

<pre><code data-source="chapters/shared/code/strings/3.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Tareas comunes con cadenas

Concatenación:

<pre><code data-source="chapters/shared/code/strings/4.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Tareas comunes con cadenas

Reemplazo:

<pre><code data-source="chapters/shared/code/strings/5.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

