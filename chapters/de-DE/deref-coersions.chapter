# Deref-Conversions

---

## Motivation

Warum funktioniert eigentlich folgendes?

```rust
struct Point {
    x: i32,
    y: i32
}

fn main() {
    let boxed_p = Box::new(Point { x: i32, y: i32 });
    println!("{}", boxed_p.x);
}
```

Box hat doch garkein Feld "x"!

---

## Auto-Dereferenzierungen

Rust dereferenziert unter bestimmten Umständen automatisch. Wie alles andere, muss das explizit angefordert werden über:

* Einen Aufruf oder Feldzugriff via den `.`-Operator
* Eine explizite Dereferenzierung mit `*`
* Bei der Übergabe mit `&`
* Führt manchmal zu einem hässlichen `&*`-Pattern

---

Dies macht vor allem Wrapper-Typen sehr ergonomisch!

---

Dahinter stecken die `Deref` und `DerefMut`-Traits.

```rust
impl<T> Deref for Box<T> {
    type Target = T;

    fn deref(&self) -> &T {
        self.inner
    }
}
```

Dieser Aufruf wird eingefügt, wenn Dereferenzierungen angefordert werden.

---

## Wichtige Auto-Dereferenzierungen

* String -> &str
* Vec<T> -> &[T]

Funktionen, die immutabel auf Strings oder Vektoren arbeiten, sollten eine immutable Slice als Argument verwenden. Das Layout der Typen ist so gewählt, dass das _kostenfrei_ ist.

---

```rust
fn print_me(message: &str) { println!("{}", message); }

fn main() {
    print_me("Foo");
    let a_string = String::from("Bar");
    print_me(&a_string);
    print_me(a_string.as_str())
}
```
