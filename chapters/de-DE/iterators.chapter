# Iteratoren

---

Rusts Iteratoren sind:

* Faul
* Pervasive
* Potentiell unendlich

---

## Woher kommen sie?

* Sammlungen wie `Vec<T>` haben eine `iter()`-Funktion, die einen Iterator erzeugt.
* Dinge wie `std::net::TcpListener` die einen Iterator von `TcpStream`s bietet.
* Iteratoren können auch auf andere Strukturen implementiert werden.

---

## Allgemeine Verwendung

---

## `next()`

Iteratoren kann manuell fortgeschritten:

```rust
fn main() {
    let items = vec![0, 1, 2];
    let iterator = items.iter();
    assert_eq!(iterator.next(), Some(0));
    assert_eq!(iterator.next(), Some(1));
    assert_eq!(iterator.next(), Some(1));
    assert_eq!(iterator.next(), None);
}
```

---

## `map()`

Transformieren Sie Elemente, wie sie ausgewertet werden:

```rust
fn main() {
    let fizzbuzz = (0..10_000)
        .map(|x| match x {
            x if x % 15 == 0 => String::from("Fizzbuzz"),
            x if x % 3  == 0 => String::from("Fizz"),
            x if x % 5  == 0 => String::from("Buzz"),
            x => format!("{}", x),
        });
    for item in fizzbuzz {
        println!("{}", item);
    }
}
```

---

## `filter()`

Filtern Sie unerwünschte Werte aus und überspringen Sie weitere Berechnungen:

```rust
fn main() {
    let evens = (0..10_000)
        .filter(|x| x % 2 == 0);
    for item in evens {
        println!("{}", item);
    }
}
```

---

## `fold()`

Reduzieren, um eine Folge von Werten nach unten auf einen einzelnen Wert:

```rust
fn factorial(val: usize) -> usize {
    (1..val).rev().fold(1, |acc, x| acc * x)
}

fn main() {
    println!("{}", factorial(10));
}
```

---

## `cycle()` & `take()`

Iteratoren wiederholen und früh beenden:

```rust
fn main() {
    // Limit the output to 30 to avoid infinite runtime.
    for item in (0..10).cycle().take(30) {
        println!("{}", item);
    }
}
```

---

## `zip()` & `unzip()`

Join Iteratoren, und teilen Sie sie wieder auseinander:

```rust
fn main() {
    let first = 0..10;
    let second = 10..20;
    
    let (first_again, _): (Vec<_>, Vec<_>) = first
        .zip(second)
        .inspect(|x| println!("Inspect: {:?}", x))
        .unzip();
    
    for item in first_again {
        println!("{}", item);
    }
}
```

---

## `max()` & `min()`

```rust
fn main() {
    println!("{}", (0..50).max().unwrap());
    println!("{}", (0..50).min().unwrap());
}
```

---

## Gotcha

Das geht nicht:

```rust
fn main() {
    let mut iter = vec![1,2,3].iter();
    println!("{:?}", iter.next());
}
```

Warum? (Denken Sie über scoping & Besitz!)