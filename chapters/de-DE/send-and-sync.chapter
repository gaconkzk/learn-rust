# Send & Sync

---

Es gibt zwei besondere Merkmale in Rust für Concurrency Semantik.

* `Senden` markiert eine Struktur sicher zu *senden* zwischen Threads.
* `Sync` kennzeichnet eine Struktur, die für *share* zwischen Threads sicher ist.
     + (`&T` ist` Send`)

---

Diese Traits sind das, was Rust verwendet Daten Rennen zu verhindern.

Sie sind *automatisch abgeleitet* für alle Arten, wenn angemessen.

---

## Automatisch abgeleitet

```rust
use std::thread;

#[derive(Debug)]
struct Thing;

// Can send between threads!
fn main() {
    let thing = Thing;
    
    thread::spawn(move || {
        println!("{:?}", thing);
    }).join();
}
```

---

Es gibt einige bemerkenswerte Typen, die nicht `Send` oder` Sync` sind.

Wie `Rc`, rohe Zeiger und `UnsafeCell`.

---

## Beispiel: `Rc`

```rust
use std::rc::Rc;
use std::thread;

// Does not work!
fn main() {
    let only_one_thread = Rc::new(true);

    thread::spawn(move || {
        println!("{:?}", only_one_thread);
    }).join();
}
```

---

## Beispiel: `Rc`

```
error[E0277]: the trait bound `std::rc::Rc<bool>: std::marker::Send` is not satisfied
 --> <anon>:7:5
  |
7 |     thread::spawn(move || {
  |     ^^^^^^^^^^^^^ the trait `std::marker::Send` is not implemented for `std::rc::Rc<bool>`
```

---

## Implementierung

Es ist möglich, die Implementierung von `Send` und` Sync` einem Typ hinzuzufügen.

```rust
struct Thing(*mut String);

unsafe impl Send for Thing {}
unsafe impl Sync for Thing {}
```

In diesen Fällen ist die Aufgabe der Faden Sicherheit für den Implementierer überlassen.

---

## Beziehungen

Wenn ein Typ sowohl `Sync` als auch` Copy` implementiert, kann er `Send` auch implementieren.

---

## Beziehungen

Ein Typ `&T` kann `Send` implementieren, wenn der Typ `T` auch `Send` implementiert.

```rust
unsafe impl<'a, T: Sync + ?Sized> Send for &'a T {}
```

---

## Beziehungen

Ein Typ `&mut T` kann `Send` implementieren, wenn der Typ `T` auch `Send` implementiert.

```rust
unsafe impl<'a, T: Send + ?Sized> Send for &'a mut T {}
```

---

## Konsequenzen

Was sind die Konsequenzen von `Send` und `Sync`?

---

## Konsequenzen

Das Tragen dieser Informationen auf der Typ-System-Ebene ermöglicht das Fahren von Daten Rennen Bugs bis zu einem * compile Zeit * -Ebene.

Verhindern, dass diese Fehlerklasse die Produktionssysteme erreicht.