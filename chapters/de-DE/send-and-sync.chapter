# Send & Sync
[Inhaltsverzeichnis](toc/default.html)

---

Rusts Unterstützung für Nebenläufigkeit basiert auf 2 Traits:

-   `Send` markiert eine Struktur als sicher zum *senden* zwischen Threads.
-   `Sync` kennzeichnet eine Struktur als sicher zum *teilen* zwischen Threads.
    -   (`&T` ist `Send`, wenn `T` `Sync`)

Beide sind sogenannte "Marker".

---

Rust nutzt diese Traits, um Datenrennen zu verhindern.

Sie sind - wenn möglich - *automatisch abgeleitet*.

---

## Automatisch abgeleitet

<pre><code data-source="chapters/shared/code/send-and-sync/1.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

Es gibt einige wichtige Typen, die nicht `Send` oder `Sync` sind.

Beispiele sind `Rc`, rohe Zeiger und `UnsafeCell`.

---

## Beispiel: `Rc`

<pre><code data-source="chapters/shared/code/send-and-sync/2.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Beispiel: `Rc`

<pre><code data-source="chapters/shared/code/send-and-sync/3.output" data-trim="hljs output"></code></pre>

---

## Implementierung

Es ist möglich, die Implementierung von `Send` und `Sync` einem Typ hinzuzufügen.

<pre><code data-source="chapters/shared/code/send-and-sync/4.rs" data-trim="hljs rust"></code></pre>
In diesen Fällen ist die Aufgabe der Implementierung, die Sicherheitsgarantien herzustellen.

---

## Beziehungen

Wenn ein Typ sowohl `Sync` als auch `Copy` implementiert, kann er `Send` auch implementieren.

---

## Beziehungen

Ein Typ `&T` kann `Send` implementieren, wenn der Typ `T` auch `Sync` implementiert.

<pre><code data-source="chapters/shared/code/send-and-sync/5.rs" data-trim="hljs rust"></code></pre>

---

## Beziehungen

Ein Typ `&mut T` kann `Send` implementieren, wenn der Typ `T` auch `Send` implementiert.

<pre><code data-source="chapters/shared/code/send-and-sync/6.rs" data-trim="hljs rust"></code></pre>

---

## Konsequenzen

Was sind die Konsequenzen von `Send` und `Sync`?

---

## Konsequenzen

Das Tragen dieser Informationen auf der Typ-System-Ebene ermöglicht das erkennen von Nebenläufigkeitsproblemen zur *Übersetzungszeit*.

Dies verhindert, dass diese Fehlerklasse die Produktionssysteme erreicht.

`Send` und `Sync` sind unabhängig von der Art der Nebenläufigkeit (async, threaded, etc.).
