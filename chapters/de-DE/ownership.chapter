# Ownership

Ownership ist die Basis f√ºr das Speichermanagement von Rust.

---

## Regeln

* Jedes St√ºck Daten wird genau einmal besessen
* Besitz kann abgegeben werden
* Der Besitzer ist f√ºr das Entfernen der Daten aus dem Speicher verantwortlich.
* Der Besitzer hat volle Gewalt √ºber die Daten und kann sie mutieren

---

Diese Regeln:
* sind fundamental f√ºr Rusts Typsystem!
* werden beim √úbersetzen angewandt.
* sind aber auch sonst praktisch.


---

## Beispiel

```rust
#[derive(Debug)]
struct Dot {
    x: i32,
    y: i32
}

fn main() {
    let dot = Dot { x: 1, y: 2 };
    pacman(dot);
}

fn pacman(dot: Dot) {
    println!("Eating {}", dot);
}
```

---


<pre class="diagram">
    main              pacman
+----------+
|          |
|    dot   |---+
|          |   |
+----------+   |    +----------+
               |    |          |
               +----|   dot    |
                    |          |
                    +----------+

                      üóë
</pre>

---

Was passiert, wenn wir `dot` versuchen, nochmal zu verwenden?

---

```rust
#[derive(Debug)]
struct Dot {
    x: i32,
    y: i32
}

fn main() {
    let dot = Dot { x: 1, y: 2 };
    pacman(dot);
    pacman(dot);
}

fn pacman(dot: Dot) {
    println!("Eating {}", dot);
}
```

---

## Oops!

---

Dieser Vorgang nennt sich im Rust-Lingo `konsumieren`. `pacman` konsumiert `dot`.

Danach kann der Wert nicht mehr verwendet werden.

---

## Hintergrund

Wen wir `pacman` mit `dot` aufrufen, werden die Daten in die Argumente von `pacman` bewegt (move). Dabei geht der Besitz an `pacman` √ºber. Aus Sicherheitsgr√ºnden darf `main` die Daten danach nicht mehr manipulieren.

TODO: maybe explain better...

---

## Mit moves umgehen: explizit klonen

Was tun, wenn dieses Verhalten nicht erw√ºnscht ist? Wir k√∂nnen eine zweite Version der Daten anlegen!

---

```rust
#[derive(Debug, Clone)]
struct Dot {
    x: i32,
    y: i32
}

fn main() {
    let dot = Dot { x: 1, y: 2 };
    pacman(dot.clone());
    pacman(dot);
}

fn pacman(dot: Dot) {
    println!("Eating {}", dot);
}
```

---

<pre class="diagram">
    main              pacman
+----------+
|          |
|    dot   |---+
|          |   |
+----------+   |    +----------+
     |         |    |          |
     |         +----|   dot    |
     |              |          |
     |              +----------+
     |
     |                Deallokation
     |                
+----------+
|          |
|  clone   |---+
|          |   |
+----------+   |    +----------+
               |    |          |
               +----|   dot    |
                    |          |
                    +----------+

                      Deallokation

</pre>

TODO: proper Diagram for this

---

Klonen ist f√ºr Daten vorgesehen, bei denen der Vorgang der Duplizierung komplex ist.

---

# Mit moves umgehen: kopieren statt moves

```rust
#[derive(Debug, Clone, Copy)]
struct Dot {
    x: i32,
    y: i32
}

fn main() {
    let dot = Dot { x: 1, y: 2 };
    pacman(dot);
    pacman(dot);
}

fn pacman(dot: Dot) {
    println!("Eating {}", dot);
}
```

---

Kopien sind f√ºr Daten vorgesehen, die im Speicher schnell kopierbar sind (memcopy) und auch kopiert werden d√ºrfen (Gegenbeispiel: File-Pointer).

---

Daten, die Copy sind, folgen den Ownership-Regeln, sie werden allerdings kopiert, wenn Ownership abgeben w√ºrde.

---

# Warnung

Die Terminologie um moves √§hnelt der von C++, deswegen sollte man die Rust-Terminologie verwenden: Besitz, Besitzabgabe und konsumieren.

---

# Praktische Beispiel

TODO: Append Vector to itself, attempt to copy File pointer...