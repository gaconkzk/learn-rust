# Dynamischer Dispatch

Manchmal möchte man sich zur Laufzeit für eine Code-Implementierung verlassen, statt den Compiler monomorphieren zu lassen.

Hierzu gibt es 2 Möglichkeiten.

---

## Dispatch durch Enums

Wenn die Anzahl der Möglichkeiten beschränkt ist, kann gerne zu einem Enum gegriffen werden:

```rust
enum Operation {
    Get,
    Set(String),
    Count
}

fn execute(op: Operation) {
    match op {
        Operation::Get => execute_get(),
        Operation::Set(s) => execute_set(s),
        Operation::Count => execute_count()
    }
}
```

---

## Alternative Form

```rust

```rust
enum Operation {
    Get,
    Set(String),
    Count
}

impl Operation {
    fn execute(&self) {
        match &self {
            &Operation::Get => execute_get(),
            &Operation::Set(s) => execute_set(s),
            &Operation::Count => execute_count()
        }
    }
}
```


---

## Hinweis

Verhindern Sie wiederholtes matchen auf denselben Enum, wenn nicht unbedingt notwendig.

---

## Trait-Objekte

Referenzen oder rohe Pointer auf Traits, genauso wie Boxen, beschreiben sogenannte "Trait-Objekte".

Trait-Objekte sind ein Paar von Pointern auf eine virtuelle Funktionstabelle und die konkreten Daten.

---

## Einschränkungen

* Es kann nur ein Trait pro Objekt verwendet werden
* Dieser Trait muss bestimmten Regeln gehorchen

---

## Regeln für Objekt-Traits

* Objektsichere Traits dürfen _nicht_ `Self: Sized` verlangen
* Alle Methoden sind objektsicher
    - sie haben keine Typ-Parameter
    - sie verwnden nicht `Self`

---

## Weitere Eigenschaften

* Da Trait-Objekte den Objekt-Typ zur Laufzeit halten, unterstützen sie Downcasts.

```rust
use std::fmt::Debug;
use std::any::Any;

// Logger function for any type that implements Debug.
fn log<T: Any + Debug>(value: &T) {
    let value_any = value as &Any;

    // try to convert our value to a String.  If successful, we want to
    // output the String's length as well as its value.  If not, it's a
    // different type: just print it out unadorned.
    match value_any.downcast_ref::<String>() {
        Some(as_string) => {
            println!("String ({}): {}", as_string.len(), as_string);
        }
        None => {
            println!("{:?}", value);
        }
    }
}
```
