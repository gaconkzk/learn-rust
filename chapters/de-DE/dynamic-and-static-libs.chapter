# Dynamische und statische Bibliotheken
[Inhaltsverzeichnis](toc/default.html)

---

Einmal umgekehrt: Rust aus C verwenden.

---

## Bibliothek

<pre><code data-source="chapters/shared/code/dynamic-and-static-libs/1.rs" data-trim="hljs rust"></code></pre>

---

## C-Header (Auszug)

<pre><code data-source="chapters/shared/code/dynamic-and-static-libs/2.c" data-trim="hljs c"></code></pre>

---

## Cargo

<pre><code data-source="chapters/shared/code/dynamic-and-static-libs/3.toml" data-trim="hljs toml"></code></pre>
`cargo build` baut nun statt einer rlib eine dynamische und eine statische lib.

---

## Verwendung

<pre><code data-source="chapters/shared/code/dynamic-and-static-libs/4.c" data-trim="hljs c"></code></pre>
<pre><code data-source="chapters/shared/code/dynamic-and-static-libs/5.sh" data-trim="hljs sh"></code></pre>

---

## AusfÃ¼hren

<pre><code data-source="chapters/shared/code/dynamic-and-static-libs/6.sh" data-trim="hljs sh"></code></pre>

---

## Woops!

Passen Sie gut mit Ownership auf!

<pre><code data-source="chapters/shared/code/dynamic-and-static-libs/7.rs" data-trim="hljs rust"></code></pre>

---

## Helfer

-   Cheddar - generiert C-Header von Rust-Libs.

