# Die Toolchain

Florian Gilcher <florian.gilcher@asquera.de>

---

https://www.rust-lang.org/en-US/install.html

---

## Rustup

Rustup ist das Standard-Tool zum Managen von Rusts compiler-Toolchain.

http://rustup.rs/

---

## Wichtige Kommandos

```sh
# Installation einer toolchain
$ rustup install stable
# Auswählen einer standard-toolchain
$ rustup default stable
# Anzeigen der Dokumentation im Browser
$ rustup doc [--std]
# Auflisten unterstützter targets
$ rustup target list
# Hinzufügen eines Targets zum installieren
$ rustup target add <target>
# Auflisten/Hinzufügen einer Komponente
$ rustup component list|add
```

---

# Erste Schritte

Führen Sie folgende Kommandos aus:

```sh
$ rustup component add rust-src
$ rustup component add rust-docs
$ rustup install nightly
```

Dies läd die Quelltexte der Standardbibliothek und
die Dokumentation zur Komplettierung und Offlineverwendung runter.

---

## Inhalt einer Toolchain

* rustc
* cargo
* rustdoc
* rust-(lldb|gdb)
* libcore/libstd

Die genaue Art des Debuggers ist Platformabhängig.

---

## rustc

```sh
$ rustc --help
```

Der Rust-Compiler übernimmt das kompilieren und linken von Rust-Code.

`rustc` ist annähernd komplett in Rust geschrieben.

---

## Funktionstest

```rust
fn main() {
    println!("Hello, World!");
}
```

---

```sh
$ rustc hello_world.rs
$ ./hello_world
Hello, World!
```

---

## Cargo

```sh
$ cargo --help
```

---

Cargo ist Rusts Build- und Codeverwaltungs-Toolchain.

Cargo wird mit `rustc` ausgeliefert, ist aber nicht fest an einer `rustc`-Version gebunden.

---

## Nochmal mit cargo

```sh
$ cargo new hello-world --bin
$ cd hello-world
$ cat hello-world
fn main() {
    println!("Hello, world!");
}
$ cargo build
   Compiling hello-world v0.1.0 (file:///Users/skade/Code/rust/scratchpad/hello-world)
    Finished debug [unoptimized + debuginfo] target(s) in 0.35 secs
$ cargo run
    Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs
     Running `target/debug/hello-world`
Hello, world!
```

---

## Ein wenig umschauen

* Was steht in Cargo.toml?
* Was steht in Cargo.lock?

---

## Cargo verwaltet auch Tools

```sh
$ cargo +nightly install clippy
$ cargo +nightly install rustfmt
```

