# Die Toolchain
[Inhaltsverzeichnis](toc/default.html)

---

https://www.rust-lang.org/en-US/install.html

---

## Rustup

Rustup ist das Standard-Tool zum Managen von Rusts compiler-Toolchain.

http://rustup.rs/

---

## Wichtige Kommandos

<pre><code data-source="chapters/shared/code/installation/1.sh" data-trim="hljs sh"></code></pre>

---

# Erste Schritte

Führen Sie folgende Kommandos aus:

<pre><code data-source="chapters/shared/code/installation/2.sh" data-trim="hljs sh"></code></pre>
Dies läd die Quelltexte der Standardbibliothek und die Dokumentation zur Komplettierung und Offlineverwendung runter.

---

## Inhalt einer Toolchain

-   rustc
-   cargo
-   rustdoc
-   rust-(lldb|gdb)
-   libcore/libstd

Die genaue Art des Debuggers ist Platformabhängig.

---

## rustc

<pre><code data-source="chapters/shared/code/installation/3.sh" data-trim="hljs sh"></code></pre>
Der Rust-Compiler übernimmt das kompilieren und linken von Rust-Code.

`rustc` ist annähernd komplett in Rust geschrieben.

---

## Funktionstest

<pre><code data-source="chapters/shared/code/installation/4.rs" data-trim="hljs rust"></code></pre>

---

<pre><code data-source="chapters/shared/code/installation/5.sh" data-trim="hljs sh"></code></pre>

---

## Cargo

<pre><code data-source="chapters/shared/code/installation/6.sh" data-trim="hljs sh"></code></pre>

---

Cargo ist Rusts Build- und Codeverwaltungs-Toolchain.

Cargo wird mit `rustc` ausgeliefert, ist aber nicht fest an einer `rustc`-Version gebunden.

---

## Nochmal mit cargo

<pre><code data-source="chapters/shared/code/installation/7.sh" data-trim="hljs sh"></code></pre>

---

## Ein wenig umschauen

-   Was steht in Cargo.toml?
-   Was steht in Cargo.lock?

---

## Cargo verwaltet auch Tools

<pre><code data-source="chapters/shared/code/installation/8.sh" data-trim="hljs sh"></code></pre>

