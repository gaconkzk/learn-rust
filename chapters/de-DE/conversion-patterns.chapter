# Konvertierungen

Rust bietet viele Möglichkeiten, die Konvertierung eines Typs in einen anderen auszudrücken.

Das erhöht die Sicherheit und kommunziert den Zweck.

---

## `From<T>`, `Into<T>`

Konvertierung eines Typens in einen anderen.

Ist `X` `From<T>`, dann ist `T` automatisch `Into<X>`.

Die Verwendung hängt vom Kontext ab.

---

## Beispiel

```rust
fn main() {
    let string = String::from("string slice");
    let string2: String = "string slice".into();
}
```

---

## `AsRef<T>`

Referenz-zu-Referenz-Konvertierung. Zeigt an, dass ein Typ einfach Referenzen auf andere Typen produzieren kann.

---

## Beispiel

```rust
fn main() {
    open_file("test");
    let path_buf = PathBuf::from("test");
    open_file(path_buf);
}

fn open_file<P: AsRef<Path>>(p: &P) {
    let path = p.as_ref();
    let file = File::open(path);
}
```

---

## `Borrow<T>` und `BorrowMut<T>`

`Borrow<T>` abstrahiert über Ownership und Borrowing. `Borrow<T>` bedeutet, dass der Typ einen Borrow des Typen `T` erzeugen kann. Es ist ähnlich `AsRef<T>`, kommuniziert aber einem anderen Zweck.
