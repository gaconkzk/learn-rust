# Speicherdarstellung

---

`size_of` und `size_of_val` helfen dabei, die Größe von Typen (in Bytes) herauzubekommen.

```rust
fn main() {
    use std::mem;

    let i: i32 = 42;

    println!("{}", mem::size_of::<i32>());
    println!("{}", mem::size_of_val(&i));
}
```

---

## Sizedness

Alle Werte in Rust haben entweder eine feste oder flexible Speichergröße. Die Sprache drückt das über den Marker `Sized` aus. `Sized` erhalten Typen, wenn ihre Größe beim Übersetzen bekannt ist.

Typen ohne Größe _müssen_ über Borrows addressiert werden.

---

## Größe von Structs

Structs haben die Größe ihrer enthaltenen Daten.

```rust
struct Byte {
    field: u8
}

fn main() {
    use std::mem;

    println!("{}", mem::size_of::<One>());

    println!("{}", mem::size_of::<[One; 2]>());
}
```

---

## Referenzen

Referenzen sind 1 usize breit. Dies gilt auch für Boxen.

```rust
fn main() {
    use std::mem;

    println!("{}", mem::size_of::<&u8>());
    println!("{}", mem::size_of::<Box<u8>>());
}
```

---

## Trait-Objekte

Ausnahme sind Trait-Objekte

```rust
trait Foo {};

fn main() {
    use std::mem;

    println!("{}", mem::size_of::<&Foo>());
    println!("{}", mem::size_of::<Box<Foo>>());
}
```

---

## Slices

Slices sind 2 usize breit. Dies gilt natürlich auch für deren Boxen.

```
fn main() {
    use std::mem;

    println!("{}", mem::size_of::<&[u8]>());
    println!("{}", mem::size_of::<Box<[u8]>>());
}
```

---

## Vektoren


Vektoren sind 3 usize breit, wegen der zusätzlich gespeicherten Kapazität.

```
fn main() {
    use std::mem;

    println!("{}", mem::size_of::<Vec<u8>>());
}
```

---

## &str, Box<str>, String

Verhalten sich wie Slices und Vektoren.

---

## Enums

Enums benötigen die Größe ihres größten Werts, 1 Bit für eine Diskriminate, plus Padding.

```rust
enum Test {
    Foo,
    Bar
}

fn main() {
    println!("Bare Values");
    println!("{:?}", std::mem::size_of::<String>());
    println!("{:?}", std::mem::size_of::<i32>());
    println!("{:?}", std::mem::size_of::<Test>());

    println!("Results:");
    println!("{:?}", std::mem::size_of::<Result<i32,String>>());
    println!("{:?}", std::mem::size_of::<Result<i32,&String>>());
    println!("{:?}", std::mem::size_of::<Result<i32,Test>>());

    println!("Options:");
    println!("{:?}", std::mem::size_of::<Option<i32>>());
    println!("{:?}", std::mem::size_of::<Option<Test>>());
}
```

---

Wenn 0 kein legaler Wert ist, nutzt Option diesen als `None`-Fall.
