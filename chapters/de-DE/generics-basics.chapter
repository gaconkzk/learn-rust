# Simple Generics

---

Generics sind fundamental für Rust.

---

## Generische Structs

<pre><code data-source="chapters/shared/code/generics-basics/1.rs" data-trim="hljs rust"></code></pre>

---

## Typinferenz

Rust findet bei ausreichender Informationslage selbst die Typen aller Variablen und Generics heraus.

Dies gilt nur *innerhalb* von Funktionsgrenzen.

Signaturen müssen immer voll angegeben werden.

---

## Generische Enums

<pre><code data-source="chapters/shared/code/generics-basics/2.rs" data-trim="hljs rust"></code></pre>

---

## Wichtige generische Enums

---

## Option

<pre><code data-source="chapters/shared/code/generics-basics/3.rs" data-trim="hljs rust"></code></pre>
Beschreibt einen Wert, der nicht zwingend vorhanden sein muss.

`None` ist ein Wert, sollte als nicht mit `null` verwechselt werden.

---

## Result

<pre><code data-source="chapters/shared/code/generics-basics/4.rs" data-trim="hljs rust"></code></pre>
Beschreibt, ob eine Operation erfolgreich war und gibt entweder den Wert oder einen Fehlerwert zurück.

---

## Typische Results

<pre><code data-source="chapters/shared/code/generics-basics/5.rs" data-trim="hljs rust"></code></pre>

---

## Generische Funktionen

Generische Funktionen haben Typparameter.

<pre><code data-source="chapters/shared/code/generics-basics/6.rs" data-trim="hljs rust"></code></pre>

