# Implementationen und Traits

---

Rust bietet die Möglichkeit, Funktionen an Typen zu binden.

---

# Warnung

Das sieht manchmal aus wie objektorientierte Programmierung, ist es aber nicht.

Insbesondere Laufzeitpolymorphismus, Nachrichten, Klassen, Subtypen und Methodenüberladung fehlen.

---

## Einfache Implementierungen: assoziierte Funktion

<pre><code data-source="chapters/shared/code/traits/1.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Anmerkung

`new` ist hier eine reine Konvention!

---

## Python lässt grüßen

<pre><code data-source="chapters/shared/code/traits/2.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Borrowing und Ownership von `self`

Ist nicht anders als normal, aber am Anfang etwas ungewohnt.

-   Borrowing durch eine Funktion hindurch *leiht gleichzeitig self aus*.
-   Dies gilt insbesondere für mutables ausleihen!
-   `self` ohne `&` gibt Ownership auf den Wert aus dem aufrufenden Kontext ab.

---

## Interessante Unterschiede zu gängigem OO

-   Werte können sich selbst ersetzen
-   Werte, zum Beispiel Iteratoren und Builder können Methoden haben, die `self` konsumieren und damit invalidiert werden.
-   Das löst das Problem, Iteratoren zu invalidieren.

---

## Eigenheiten

-   Implementierungen können mehrfach vorkommen

---

## Self

`Self` ist in Rust ein besonderer Typ. Er referenziert immer den Typ, auf den sich die Implementierung bezieht.

<pre><code data-source="chapters/shared/code/traits/3.rs" data-trim="hljs rust"></code></pre>

---

## Traits

Traits sind Rusts Variante, über Typen zu abstrahieren.

---

Wir haben schon einen Trait kennen gelernt: `Debug`.

---

Traits definieren Funktionen, die Typen implementieren müssen. Sie können dann generisch verwendet werden.

---

<pre><code data-source="chapters/shared/code/traits/4.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Self
[Inhaltsverzeichnis](toc/default.html)

---

`Self` ist ein besonderer Typ: er ist immer der Typ, der gerade implementiert wird.

---

## Generische Traits

Traits können generisch sein.

---

<pre><code data-source="chapters/shared/code/traits/5.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

Das Arbeiten mit generischen Traits ist Standard.

---

## Typinferenz von Traits

Typinferenz von Traits ist sehr fortgeschritten, die Anzahl der benötigten Informationen kann aber komplex werden. Manchmal braucht der Compiler Hilfe bei der Lösung.

Hierzu gibt es mehrere Techniken.

---

## UFCS

Unified Function Call Syntax

<pre><code data-source="chapters/shared/code/traits/6.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Assoziierte Typen

Assoziierte Typen sind generische Parameter, die bei der Inferenz ausser acht gelassen werden.

---

<pre><code data-source="chapters/shared/code/traits/7.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

