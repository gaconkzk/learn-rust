## Unsicheres Rust
[Inhaltsverzeichnis](toc/default.html)

---

Rusts Typsystem bietet viele Garantien, diese machen manchmal jedoch Lösungen schwerer und unmöglich.

Daher hat Rust das Konzept von `unsicherem Code`.

---

Unsicherer Code darf:
-   Beliebige Speicherzugriffe durchführen
-   Rohe Pointer dereferenzieren
-   Externe Funktionen aufrufen
-   Eigenschaften wie `Send` und `Sync` feststellen
-   Globale (unsynchronisierte) Variablen schreiben

---

Nicht unsicher sind:
-   Konvertierungen in rohe Pointer
-   Speicherlecks

---

Unsicherer Code sollte niemals:
-   Genutzt werden um Speicher zu managen, der von einem anderen Allokator gemanagt wird.
-   Konstruieren Sie niemals einen `std::vec::Vec` aus einem C++-Vektor und lassen ihn dann fallen.
-   borrowck umgehen, z.B. Lebenszeiten oder Mutabilität eines Typens umändern - Beliebte Quelle von "aber ich war mir so sicher, dass das geht"

---

## Rusts kleines Geheimnis

Beim implementieren von Datenstrukturen ist unsafe recht häufig.

Sicheres Rust ist die schlechteste Sprache zum implementieren von Linked Lists. Es gibt eine [ganze Abhandlung darüber](TODO:%20Link)

---

Unsicherer Code benötigt *immer* eine Markierung durch `unsafe`.

<pre><code data-source="chapters/shared/code/unsafe/1.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Fallen von `unsafe`

-   Nicht jedes Beispiel ist so simpel. `unsafe` *muss* die Invarianten von Rust einhalten!
-   Dies gilt vor allem für Ownership und mutables Borrowing
-   `unsafe` kann dazu führen, dass ein Wert 2 Owner hat -&gt; double free
-   `unsafe` kann dazu führen, dass eigentlich immutable Daten temporär mutabel sind, was zu vielen Problem führen kann

---

Rust erlaubt einem, sich in den Fuss zu schiessen, es möchte nur vorher, dass man die Waffe aus dem Holster nimmt und die Sicherung entriegelt.

---

## Praktisches Beispiel

Da Rust aliasing verbietet, kann man in sicherem Rust keine Slice in 2 Slices teilen.

<pre><code data-source="chapters/shared/code/unsafe/2.rs" data-trim="hljs rust"></code></pre>
