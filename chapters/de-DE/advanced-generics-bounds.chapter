# Nochmal Generics: Beschränkungen

---

Manchmal möchten wir Typen auf bestimmte Aspekte beschränken, aber trotzdem generisch programmieren.

Hierzu können wir Typparameter beschränken.

---

Dies kann überall geschehen, wo Typparameter auftauchen.

---

Beispiel: `println!("{:?}")` benötigt `Debug`

```rust
fn print_everything<T: Debug>(to_print: T) {
    println!("{:?}", to_print);
}

fn print_everything2<T>(to_print: T)
    where T: Debug
{
    println!("{:?}", to_print);
}
```

---

Beispiel: Ein generisches Struct soll nur debugbare Werte enthalten

```rust
struct MyStruct<T: Debug> {
    inner: T
}
```

---

Beschränkungen können sich auch auf das Ziel von Implementierungen beziehen:

```rust
impl<X,T> MyTrait<X> for T
    where T: Debug,
          X: Debug {
}
```

---

Genauso kann der Trait dies direkt verlangen:

```rust
trait MyTrait<X: Debug> {
    //...
}
```

---

Rust erlaubt keine negativen Bedingungen (Trait A und _nicht_ Trait B)


---

## Ausnahme: `Sized`

Wenn nicht anders angegeben, kriegen alle generischen Parameter die Bedingung `Sized` (der Typ hat eine bekannte Speichergröße. Dies kann mit der Bedingung `?Sized` ausgeschaltet werden.

```rust
fn take_unsized<T: ?Sized>(t: &T) {
    //...
}
```

---

Das hat ergonomische Gründe, da Typ-Parameter häufig in Funktionsparametern verwendet werden und dort meist eine bekannte Größe haben müssen.

---

Bounds können überall auftauchen, was sich ausnutzen lässt, um Typen de-facto zu beschränken.

```rust
struct Wrapper<T> {
    inner: T
}

impl<T> Wrapper<T> {
    fn new(inner: T) -> Wrapper<T> where T: Debug {
        Wrapper { inner: inner }
    }

    fn inspect(&self) where T: Debug {
        println!("{:?}", &self);
    }
}
```

---

Das kann überraschend praktisch sein, da sich verschiedene Bedingungen bei Aufruf und Konstruktion besser ausdrücken lassen.

---

Sehr häufig sind Bounds in Funktionsaufrufen in Kombination mit Konvertierungsfunktionen:

```rust
fn open_file<P: AsRef<Path>>(pathlike: P) {
    let path = pathlike.as_ref();
}
```


---

## Generische Implementierungen

Traits können für Typparameter implementiert werden.

```rust
trait Double {
    fn double(self) -> i64;
}

impl<T> Double for T where T: Into<i64> {
    fn double(self) -> i64 {
        let val: i64 = self.into();
        val * 2
    }
}

fn main() {
    21.double();
}
```

---

## Trait-Abhängigkeiten

Traits können auch die Implementierung anderer Traits verlangen und Implementierungen von Funktionen vorgeben.

```rust
trait Double : Into<i64> {
    fn double(self) -> i64 {
        let val: i64 = self.into();
        val * 2
    }
}

impl<T> Double for T where T: Into<i64> { }

fn main() {
    21.double();
}
```