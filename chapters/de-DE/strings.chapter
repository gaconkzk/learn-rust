# Strings
[Inhaltsverzeichnis](toc/default.html)

---

Es gibt verschiedene Arten von Strings in Rust.

Am häufigsten sind `String` und `&str`.

---

## `String`

-   *Besitzt* die Daten und kann frei mutiert werden.
-   Existiert als Zeiger auf einige Bytes, eine Länge und eine Kapazität.
-   Existiert auf dem *Heap*.
-   Implementiert `Copy` nicht, sondern implementiert `Clone`.

---

## `&str`

-   Ein unveränderlicher Verweis auf einen String-Slice.
-   Nur durch einen Pointer verwendbar.
-   Kann überall, auf dem Heap, Stack oder im Programmspeicher sein.

---

## Allokation

<pre><code data-source="chapters/shared/code/strings/1.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Wann verwenden?

-   `String` ist am *einfachsten* zu verwenden, gerade am Anfang. Verfeinern geht später immernoch.
-   `String` besitzt seine Daten, funktioniert also gut als Feld eines `struct` oder Enums.

-   `&'static str` funktioniert gut für konstante Werte.
-   `&str` wird typischerweise in Funktionsargumenten verwendet.

---

## Exotische String-Typen

-   `OsStr` und `OsString` können bei der Arbeit mit Dateisystemen oder Systemaufrufen vorkommen.

-   `CStr` und `CString` können bei der Arbeit mit FFI auftreten.

Die Unterschiede zwischen `*Str` und `*String` sind im allgemeinen die gleichen wie die normalen Typen.

---

## `OsString` & `OsStr`

Diese Typen repräsentieren *systembasierte native* Strings. Dies ist erforderlich, da Unix- und Windows-strings unterschiedliche Eigenschaften aufweisen.

---

## Hinter den Kulissen von `OsString`

-   Unix-Strings sind oft willkürliche Nicht-Null-Sequenzen, die üblicherweise als UTF-8 interpretiert werden.
-   Windows-Strings sind oft willkürliche Nicht-Null-Sequenzen, die üblicherweise UTF-16 interpretiert werden.
-   Rust-Strings sind immer gültig UTF-8, und können Nullen enthalten.

`OsString` und `OsStr` überbrücken diese Lücke und ermöglichen eine günstige Konvertierung zu und von `String` und `str`.

---

## `CString` und `CStr`

Diese Typen sind gültige C-kompatible Strings.

Sie werden überwiegend bei FFI mit externem Code verwendet.

Es wird dringend empfohlen, die gesamte Dokumentation dieser Typen vor der Verwendung zu lesen.

---

## Manipulieren von Strings

Aufspaltung:

<pre><code data-source="chapters/shared/code/strings/3.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Manipulieren von Strings

Verkettung:

<pre><code data-source="chapters/shared/code/strings/4.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Manipulieren von Strings

Ersetzen:

<pre><code data-source="chapters/shared/code/strings/5.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

