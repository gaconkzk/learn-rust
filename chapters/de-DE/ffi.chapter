# FFI
[Inhaltsverzeichnis](toc/default.html)

---

Rust unterstützt das Platform-ABI und kann direkt mit dynamischen oder statischen Bibliotheken interagieren *und* solche produzieren.

---

Es entstehen keine Konvertierungskosten.

---

## C aus Rust verwenden

---

## Beispiel: Rust-Bindings für libleveldb

[leveldb.h](https://github.com/google/leveldb/blob/master/include/leveldb/c.h)

---

## Reihenfolge

Wir folgen der Reihenfolge des Header-Files:
-   erst low-level-Bindings
-   dann (minimale) sichere Bindings
-   dann eine kleine Abstraktion

---

## Hilfreiche Helper

<pre><code data-source="chapters/shared/code/ffi/1.rs" data-trim="hljs rust"></code></pre>
Rust linted Code-Stil, aber C-Stil ist nunmal kein Rust-Stil.

---

## System-libc

<pre><code data-source="chapters/shared/code/ffi/2.rs" data-trim="hljs rust"></code></pre>

---

## Opake Typen

Hier werden spezielle Structs verwendet, die nicht konstruiert werden oder gelesen werden können - sie besitzen keine Varianten!

<pre><code data-source="chapters/shared/code/ffi/3.rs" data-trim="hljs rust"></code></pre>

---

## Enums

<pre><code data-source="chapters/shared/code/ffi/4-3.rs" data-trim="hljs rust"></code></pre>
Das Layout von Enums und Structs ist in Rust (momentan) dem Compiler überlassen. `#[repr(C)]` weist den Compiler an, stattdessen das Platform-Layout zu verwenden.

---

## Externe Funktionen

<pre><code data-source="chapters/shared/code/ffi/5.rs" data-trim="hljs rust"></code></pre>

---

## Callbacks

<pre><code data-source="chapters/shared/code/ffi/6.rs" data-trim="hljs rust"></code></pre>

---

## Utility-Funktionen

<pre><code data-source="chapters/shared/code/ffi/7.rs" data-trim="hljs rust"></code></pre>
Wichtig: Wer allokiert, deallokiert!

---

## Was zur Hölle

<pre><code data-source="chapters/shared/code/ffi/8.output" data-trim="hljs output"></code></pre>
Warum ist die Versionsnummer bitte architekturabhängig?

---

## Und nun?

Wir binden die Funktionen, aber sicher ist hier garnichts.

---

## Binden roher Pointer mit Lifecycle-Management

<pre><code data-source="chapters/shared/code/ffi/9.rs" data-trim="hljs rust"></code></pre>

---

## Warum so?

-   Structs mit einem Feld verschwinden zur Laufzeit.
-   Isoliert das Lifecyclemanagement des Pointers vom Rest des Codes
-   In älteren Versionen von Rust verändert `Drop` das Layout des Structs.

---

## Handhabung von C-Style-Errors

> Error handling styles in C can be organized into one of several distinct styles, such as popular or correct. Some examples of each.

[Ted Unangst](http://www.tedunangst.com/flak/post/to-errno-or-to-error)

---

## Handhabung von leveldb-Fehlern

<pre><code data-source="chapters/shared/code/ffi/10.rs" data-trim="hljs rust"></code></pre>

---

## Handhabung von C-Strings

Siehe [`std::ffi::CString`](https://doc.rust-lang.org/std/ffi/struct.CString.html).

Vorsicht: Beachten Sie genau die Ownership-Semantik und verwenden Sie `new`, `from_raw` und unter Umständen `std::mem::forget()` richtig.

---

## Weitere Schönheiten

Lebenszeiten ermöglichen es, Pointer-Invalidierung sicher zu gestalten.

---

## Beispiel

<pre><code data-source="chapters/shared/code/ffi/11.rs" data-trim="hljs rust"></code></pre>
Der Iterator muss droppen, bevor die Datenbank droppt.

Diese Invariante gibt leveldb für `leveldb_t` und `leveldb_iterator_t` vor.

---

## Trick: das geht auch ohne Speicherverbrauch

<pre><code data-source="chapters/shared/code/ffi/12.rs" data-trim="hljs rust"></code></pre>
PhantomData ist ein 0 Byte großer Typ, der so tut als sei eine Referenz zu Database da.

Solche Optimierungen sollten mit `compile-fail` getestet werden!

---

## compile-fail

`compile-fail` ist eine Extraktion aus der `rustc`-Testsuite und erlaubt es, Erwartungen über Fehlermeldungen auszudrücken.

---

## Callbacks

<pre><code data-source="chapters/shared/code/ffi/13.rs" data-trim="hljs rust"></code></pre>

---

## Probleme

-   `state: *c_void` eine Art, in C Polymorphismus auszudrücken
-   Wie sorge ich dafür, dass `c_void` überall gleich ist?
-   Wie sorge ich dafür, dass `c_void` polymorph ist?

---

## Generics, Traits und rohe Boxen

<pre><code data-source="chapters/shared/code/ffi/14.rs" data-trim="hljs rust"></code></pre>
Wichtig: Der Trait arbeitet auf Heap-Allokierten Werten.

---

## Verwendung

<pre><code data-source="chapters/shared/code/ffi/15.rs" data-trim="hljs rust"></code></pre>

---

## Umgang mit Slices

Konvertierung von Slices ist ähnlich einfach:

<pre><code data-source="chapters/shared/code/ffi/16.rs" data-trim="hljs rust" class="lang-rust"></code></pre>
Bitte auch hier auf Besitzsemantik achten.

---

## Falle

<pre><code data-source="chapters/shared/code/ffi/17.rs" data-trim="hljs rust" class="lang-rust"></code></pre>
Huch! Plötzlich habe ich einen mutablen und immutablen Pointer.

---

## Helfer

-   [Servos bindgen](https://github.com/servo/rust-bindgen)
-   Sehr fortgeschritten, kann auch mit C++ umgehen.
