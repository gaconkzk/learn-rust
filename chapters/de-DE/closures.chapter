# Closures

Rust hat Closures. Mehrere.

---


Vorteil:
* Hoch optimiert und nur mit den absolut benötigten Laufzeitkosten.
Nachteil:
* Den Typ zu bestimmen ist nicht immer einfach

---

## Notation

```rust
fn main() {
    let vec = vec![1,2,3];
    vec.map(|x| x**2).collect::<Vec<_>>();
}
```

```rust
fn main() {
    let vec = vec![1,2,3];
    let double = |x| { x ** 2 };
    vec.map(double).collect::<Vec<_>>();
}
```

---

## Closure-Typen

FnOnce
* Die Closure konsumiert ihre Umgebung
FnMut
* Die Closure verändert ihre Umgebung
Fn
* Die Closure referenziert ihre Umgebung immutabel

---

`rustc` stellt den Typ automatisch fest, aber man braucht ihn in Typsignaturen!

---

Es besteht eine Typbeziehung: Fn impliziert FnMut, FnMut impliziert FnOnce.

---

## Notation von Closure-Argumenten

```rust
fn call_with_one<F>(some_closure: F) -> i32
    where F: Fn(i32) -> i32 {

    some_closure(1)
}
```

---

## Moves und Closures

Da die Closure-Umgebung implizit ist, müssen Werte explizit hineinbewegt werden.

```rust
fn main() {
    let num = 5;

    let owns_num = move |x: i32| x + num;
}
```

---

## Trait Objects und Closures

Da Closures Traits implementieren, sind sie legale Trait-Objekte.

```rust
fn factory() -> Box<Fn(i32) -> i32> {
    let num = 5;

    Box::new(move |x| x + num)
}
```