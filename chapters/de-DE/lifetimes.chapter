# Lebenszeiten
[Inhaltsverzeichnis](toc/default.html)

---

Rusts Lebenszeiten sind berühmt-berüchtigt dafür, schwer zu sein.

---

Das ist nicht notwendig.

---

## Lebenszeiten

-   Beschreiben die Zeit, die alle Daten im Speicher verbringen
-   Sind deskriptiv - sie können nichts erzwingen
-   Lebenszeiten sind Typen!

---

## Motivation

<pre><code data-source="chapters/shared/code/lifetimes/1.rs" data-trim="hljs rust"></code></pre>

---

Dieser Code würde - würde er funktionieren - Speicherverletzungen auslösen.

---

Korrekte müsste die Struct-Definition heissen:

<pre><code data-source="chapters/shared/code/lifetimes/2.rs" data-trim="hljs rust"></code></pre>

---

Wrapper ist nun: \* Generisch sowohl über den Typ T \* als auch eine Lebenszeit 'a (seine eigene) \* die durch das Ausleihen gebundenen Werte müssen *mindestens ebensolang* leben

---

Merke:

Lebenszeiten beschreiben Mindestbedingungen.

---

## Mehrere Lebenszeiten in einer Signatur

<pre><code data-source="chapters/shared/code/lifetimes/3.rs" data-trim="hljs rust"></code></pre>

---

## Sublebenszeiten

<pre><code data-source="chapters/shared/code/lifetimes/4.rs" data-trim="hljs rust"></code></pre>

---

Lingo: `Container outlives Worker`

---

Viel mehr als "dies muss länger (oder ebensolange) leben als das" können Lebenszeiten nicht.

---

Beliebte Falle: "Lebenszeiten verkürzen" geht nicht, denn sie beschreiben nur.

---

## `'static`

`'static` ist eine Lebenszeit, die länger lebt als alle anderen. Das ist nicht unbedingt unendlich!

---

`'static` sind:

-   In der Binärdatei enthaltene Daten, zum Beispiel statische Strings.
-   Heap-allokierte Werte (z.B. der Inhalt von `Box`)
-   sofern diese nicht an Werte gebunden sind, die kürzer leben!
-   Globals

---

`'static` ist nichts ehrrühriges. In nebenläufigen Programmen ist es durchaus sehr häufig. Gerade, wenn mit events gearbeitet wird, müssen die Daten meist auf dem Heap liegen, da der Stack dem Evenreaktor gehört.

---

Lebenszeiten gelten für alle Typen, nicht nur Referenzen, daher sind sie Bedingungen in generischem Code:

<pre><code data-source="chapters/shared/code/lifetimes/5.rs" data-trim="hljs rust"></code></pre>

---

## Lifetime-Elision

Im Standardfall werden Lebenszeiten in Signaturen eingefügt. Zum Beispiel entspricht:

<pre><code data-source="chapters/shared/code/lifetimes/6.rs" data-trim="hljs rust"></code></pre>

---

## Lebenszeiten und Bindings

<pre><code data-source="chapters/shared/code/lifetimes/7.rs" data-trim="hljs rust"></code></pre>
<pre><code data-source="chapters/shared/code/lifetimes/8.rs" data-trim="hljs rust"></code></pre>

---

## Lebenszeiten und Boxen

Bei Boxen ist die Standardlebenszeit `'static`. Manchmal ist das zu lang, daher lässt sie sich überschreiben:

<pre><code data-source="chapters/shared/code/lifetimes/9.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

