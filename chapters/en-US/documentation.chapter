# Documentation

---

## `rustdoc`

Rust provides a standard documentation tool called `rustdoc`. It is commonly used through `cargo doc`.

Because of this Rust code is almost always documented in a common format.

---

## `std` Documentation

The standard library documentation is hosted at https://doc.rust-lang.org/std/.

A local, offline version can be opened with:

```bash
rustup doc --std
```

---

## Crate Documentation

Documentation for crates hosted on http://crates.io/ can be found at https://docs.rs/.

Some crates may also have other documentation found via the "Documentation" link on their listing in http://crates.io/.

---

## Example: A Module

<iframe src="https://doc.rust-lang.org/std/vec/" width=100% height=400></iframe>

---

## Example: A Module

This page documents the `vec` module.

It starts with some examples, then lists any `struct`s, traits, or functions the module exports.

---

## How is it Generated?

`rustdoc` can read Rust code and Markdown documents.

`//!` and `///` comments are read as Markdown.

```rust
//! Module documentation comment like the 'examples' section from `std::vec`.

/// Documents functions, `struct`s, and traits.
/// Here it documents a function.
fn function_with_documentation() {}

// Shows in documentation too, but not with a comment.
fn function_without_documentation() {}
```

---

## Example: Components

<iframe src="https://doc.rust-lang.org/std/string/#structs" width=100% height=400></iframe>

---

## Example: Functions

<iframe src="https://doc.rust-lang.org/std/string/struct.String.html#method.new" width=100% height=400></iframe>

---

## Code Examples

By default code blocks in documentation are tested.

<pre><code>
/// ```rust
/// assert_eq!(always_true(), true)
/// ```
fn always_true() -> bool { true }
</code></pre>

---

## Navigation

The arguments and return types of functions are links to their respective types.

The sidebar on the left offers quick navigate to other parts of the module.
