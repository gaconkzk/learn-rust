# The Toolchain

Florian Gilcher <florian.gilcher@asquera.de>

---

https://www.rust-lang.org/en-US/install.html

---

## Rustup

Rustup is the standard tool for managing Rusts compiler toolchain.

http://rustup.rs/

---

## Important Commands

```sh
# Install a toolchain
$ rustup install stable
# Select a standard toolchain
$ rustup default stable
# View the documentation in the browser
$ rustup doc [--std]
# List supported targets
$ rustup target list
# Add a target to install
$ rustup target add <target>
# List/Add a component
$ rustup component list|add
```

---

# First Steps

Execute the following commands:

```sh
$ rustup component add rust-src
$ rustup component add rust-docs
```

This loads the sources of the default library and documentation
for completion and offline use.

---

## Content of the Toolchain

* rustc
* cargo
* rustdoc
* rust-(lldb|gdb)
* libcore/libstd

The debugger installed is platform dependent.

---

## rustc

```sh
$ rustc --help
```

The Rust compiler builds and links Rust code.

`rustc` is almost completely written in Rust.

---

## Functional Test

```rust
fn main() {
    println!("Hello, World!");
}
```

---

```sh
$ rustc hello_world.rs
$ ./hello_world
Hello, World!
```

---

## Cargo

```sh
$ cargo --help
```

---

Cargo is Rusts build and package management tool.

Cargo is installed along with `rustc`, but is not tightly bound to a `rustc` verison.

---

## Once more with Cargo

```sh
$ cargo new hello-world --bin
$ cd hello-world
$ cat hello-world
fn main() {
    println!("Hello, world!");
}
$ cargo build
   Compiling hello-world v0.1.0 (file:///Users/skade/Code/rust/scratchpad/hello-world)
    Finished debug [unoptimized + debuginfo] target(s) in 0.35 secs
$ cargo run
    Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs
     Running `target/debug/hello-world`
Hello, world!
```

---

## A Little Look Around

* What is in Cargo.toml?
* What is in Cargo.lock?

---

## Cargo Also Manages Tools

```sh
$ cargo +nightly install clippy
$ cargo +nightly install rustfmt
```

