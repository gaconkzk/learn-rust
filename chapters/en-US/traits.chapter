# Implementation and Traits

---

Rust offers the possibility to bind functions to types.

---

# Warning

This sometimes looks like object-oriented programming, but it is not.

In particular, run-time polymorphism, messages, classes, subtypes, and method overload are missing.

---

## Simple implementations: associated function

```rust
struct Point {
    x: i32,
    y: i32
}

impl Point {
    fn new(x: i32, y: i32) -> Point {
        Point { x: x, y: y }
    }
}

fn main() {
    let point = Point::new(1,2);
}
```

---

## Remark

`new` here is purely convention.

---

## Python Says Hello

```rust
#[derive(Debug)]
struct Point {
    x: i32,
    y: i32
}

impl Point {
    fn new(x: i32, y: i32) -> Point {
        Point { x: x, y: y }
    }
    
    fn from_pair(pair: (i32, i32)) -> Point {
        Point { x: pair.0, y: pair.1 }
    }
    
    fn into_pair(self) -> (i32, i32) {
       (self.x, self.y)
    }
    
    fn inspect(&self) {
        println!("Current point value: {:?}", self); 
    }
    
    fn move(&mut self, x: i32, y: i32) {
        self.x = x;
        self.y = y;
    }
    
    fn x(&self) -> &i32 {
        &self.x
    }
    
    fn x_mut(&self) -> &mut i32 {
        &mut self
    }
    
    fn y(&self) -> &i32 {
        &self.y
    }
    
    fn y_mut(&self) -> &mut i32 {
        &mut self
    }
    
}

fn main() {
    let p = Point::new(1,2);
    p.inspect();
    p.move(2,3);
    p.inspect();
    let mut x = p.x_mut();
    *x = 5;
    p.inspect();
}
```

---

## Borrowing and Ownership of `self`

It is not unlike normal, but at the beginning somewhat unfamiliar.

* Borrowing through one function _simultaneously grants self_.
* This is especially applicable for mutable borrows!
* `self` without` & `returns ownership to the value from the calling context.

---

## Interesting Differences to Common OO

* Values can replace themselves
* Values, for example, iterators and builders can have methods that consume `self` and are thus invalidated.
* This solves the problem of inverting iterators.

---

## Attributes

* Implementations can occur multiple times

---

## Self

`Self` is a special type in Rust. It always references the type to which the implementation refers.

```rust
struct Point {
    x: i32,
    y: i32
}

impl Point {
    fn new(x: i32, y: i32) -> Self {
        Point { x: x, y: y }
    }
}
```

---

## Traits

Traits are Rusts variant, abstracting over types.

---

We've already met a trait: `Debug`.

---

Traits define functions types must implement. They can then be used generically.

---

```rust
struct Point {
    x: i32,
    y: i32
}

trait Distance {
    fn distance(self, other: Self) -> i32;
}

impl Distance for Point {
    fn distance(self, other: Point) -> i32 {
      // TODO: fill in the blanks
    }
}
```