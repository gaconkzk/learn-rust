# Outlook
[Table of Contents](toc/english.html)

---

What is coming in the near future for Rust?

---

## [RFC: Specialization](https://github.com/rust-lang/rust/issues/31844)

Specialization permits multiple `impl` blocks to apply to the same type/trait, so long as one of the blocks is clearly "more specific" than the other. The more specific `impl` block is used in a case of overlap.

**Status:** Blocked by soundness holes.

---

## [RFC: Specialization](https://github.com/rust-lang/rust/issues/31844)

<pre><code data-source="chapters/shared/code/outlook/1.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## [RFC: `impl Trait`](https://github.com/rust-lang/rust/issues/34511)

Adds a conservative form of abstract return types, also known as impl Trait. Abstract return types allow a function to hide a concrete return type behind a trait interface similar to trait objects, while still generating the same statically dispatched code as with concrete types.

**Status:** Syntax specification and scope determination.

---

## [RFC: `impl Trait`](https://github.com/rust-lang/rust/issues/34511)

<pre><code data-source="chapters/shared/code/outlook/2.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## [RFC: Constant Generics](https://github.com/rust-lang/rfcs/pull/1931)

Introduces a simple form of dependent types.

Dependent types are types, which depend on values, instead of types. For example, `[T; 3]`, is dependent since it depends on the value, 3, for constructing the type. Dependent types, in a sense, are similar to normal generics, where types can depend on other types (e.g. `Vec<T>`), whereas dependent types depend on values.

**Status:** Ironing out issues, syntax specification.

---

## [RFC: Constant Generics](https://github.com/rust-lang/rfcs/pull/1931)

<pre><code data-source="chapters/shared/code/outlook/3.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## [RFC: `pub(restricted)`](https://github.com/rust-lang/rust/issues/32409)

Expand the current `pub`/non-`pub` categorization of items with:

* `pub(foo::bar)`: make this item visible solely to a (named) module tree
* `pub(crate)`: make this item visible solely to a crate

**Status:** In release pipeline.

---

## [RFC: `pub(restricted)`](https://github.com/rust-lang/rust/issues/32409)

<pre><code data-source="chapters/shared/code/outlook/4.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## [Project: Tock OS](https://www.tockos.org/).

Tock is written in Rust, a type-safe systems language with no runtime or garbage collector. It uses the Rust type system to enforce safety of components, called capsules, in a single-threaded event-driven kernel. Also supports userland processes written in other languages.

**Status:** Rust in userland complicated by an [LLVM bug](https://bugs.llvm.org/show_bug.cgi?id=32924) in [Position Independent Code](https://github.com/rust-lang/rust/pull/41560).

---

## [Project: Tock OS](https://www.tockos.org/).

![Hail Device](img/hail.png)

---

### [Project: `stdweb`](https://github.com/koute/stdweb)

Provide Rust bindings to the Web APIs and to allow a high degree of interoperability between Rust and JavaScript.

**Status:** Work in progress. [Help out!](https://github.com/koute/stdweb/issues)

---

### [Project: `stdweb`](https://github.com/koute/stdweb)

<pre><code data-source="chapters/shared/code/outlook/5.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## [Project: Cookbook](https://github.com/brson/rust-cookbook)

The Rust Cookbook is a collection of simple examples that demonstrate good practices to accomplish common programming tasks, using the crates of the Rust ecosystem.

These examples are complete, and suitable for copying directly into new cargo projects. They are tested and guaranteed to work.

**Status:** Seeking contributions.