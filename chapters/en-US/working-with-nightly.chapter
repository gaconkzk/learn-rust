# Working With Nightly

---

## Why?

-   Dependencies may require nightly
-   Compile times and error messages are sometimes better (sometimes not)
-   There are several features which are not yet stable
-   Compiler plugins

---

## Recent Changes

In [Rust 1.15](https://blog.rust-lang.org/2017/02/02/Rust-1.15.html) the 'custom derive' feature was made stable.

This was for many projects the only reason to be using nightly.

It is expected that the number of packages requiring nightly will significantly decrease soon.

---

## Using Nightly

Use `rustup` to override the version used in a specific directory.

<pre><code data-source="chapters/shared/code/working-with-nightly/1.bash" data-trim="hljs bash"></code></pre>

---

## Features

Features are gated behind "Feature Flags" which are enabled project wide.

Some examples:

-   `asm` which provides inline assembly support
-   `no_std` which disables implict `extern crate std`
-   `inclusive_range`, similar to the stable `exclusive_range`

---

## Enabling Features

To enable a feature, add the following line into `src/main.rs` (for executables), or`src/lib.rs` (for libraries):

<pre><code data-source="chapters/shared/code/working-with-nightly/2.rs" data-trim="hljs rust"></code></pre>

---

## Compiler Plugins

Compiler Plugins add additional capabilities to Rust. For example:

-   (Previously) custom derive
-   Linters
-   Libraries like [`regex_macros`](https://github.com/rust-lang/regex#usage-regex-compiler-plugin)

---

## Enabling Compiler Plugins

To enable a compiler plugin add the following line into `src/main.rs` (for executables), or`src/lib.rs` (for libraries):

<pre><code data-source="chapters/shared/code/working-with-nightly/3.rs" data-trim="hljs rust"></code></pre>

